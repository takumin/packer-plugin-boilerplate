# https://taskfile.dev

version: '3'

vars:
  APPNAME:
    sh: basename {{.TASKFILE_DIR}}
  PKGNAME:
    sh: go mod edit -json | jq -r '.Module.Path'
  VERSION:
    sh: gobump show -r version
  REVISION:
    sh: git rev-parse HEAD 2>/dev/null
  PRERELEASE: '{{.PRERELEASE | default "dev" .PRERELEASE}}'
  FULLVERSION: '{{.VERSION}}{{if ne "" .PRERELEASE}}-{{.PRERELEASE}}{{end}}'
  BINNAME: '{{.APPNAME}}_v{{.FULLVERSION}}_{{OS}}_{{ARCH}}{{exeExt}}'

  LDFLAGS_PRE: -s -w -buildid=
  LDFLAGS_POST: -extldflags -static
  LDFLAGS_VERSION: -X "{{.PKGNAME}}/version.Version={{.VERSION}}"
  LDFLAGS_REVISION: -X "{{.PKGNAME}}/version.Revision={{.REVISION}}"
  LDFLAGS_PRERELEASE: -X "{{.PKGNAME}}/version.VersionPrerelease={{.PRERELEASE}}"
  LDFLAGS: '{{.LDFLAGS_PRE}} {{.LDFLAGS_VERSION}} {{.LDFLAGS_REVISION}} {{.LDFLAGS_PRERELEASE}} '
  BUILDFLAGS: -trimpath -ldflags '{{.LDFLAGS}}'

tasks:
  default:
    silent: true
    deps:
      - tool
      - mod
      - gen
      - fmt
      - vet
      - sec
      - vuln
      - lint
      - test
      - build

  clean:
    cmds:
      - rm -f coverage.out
      - rm -f coverage.html
      - rm -fr bin
      - rm -fr .task

  tool:
    run: once
    sources:
      - .aqua.yaml
    generates:
      - .task/.done_tool
    cmds:
      - aqua install -a
      - cmd: touch .task/.done_tool
        silent: true

  mod:
    run: once
    deps: [tool]
    sources:
      - go.mod
      - go.sum
    generates:
      - .task/.done_mod
    cmds:
      - go mod download
      - go mod tidy
      - cmd: touch .task/.done_mod
        silent: true

  gen:
    run: once
    deps: [mod]
    sources:
      - '**/*.go'
    generates:
      - '**/*.hcl2spec.go'
    cmds:
      - go generate ./...

  fmt:
    run: once
    deps: [gen]
    sources:
      - '**/*.go'
    generates:
      - .task/.done_fmt
    cmds:
      - gofmt -e -d .
      - cmd: touch .task/.done_fmt
        silent: true

  vet:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
    generates:
      - .task/.done_vet
    cmds:
      - go vet ./...
      - cmd: touch .task/.done_vet
        silent: true

  sec:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
    generates:
      - .task/.done_sec
    cmds:
      - gosec -quiet -fmt golint ./...
      - cmd: touch .task/.done_sec
        silent: true

  vuln:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
    generates:
      - .task/.done_vuln
    cmds:
      - trivy fs -q -s HIGH,CRITICAL --scanners vuln,config,secret,license .
      - cmd: touch .task/.done_vuln
        silent: true

  lint:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
    generates:
      - .task/.done_lint
    cmds:
      - staticcheck ./...
      - cmd: touch .task/.done_lint
        silent: true

  test:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
    generates:
      - coverage.out
      - coverage.html
    cmds:
      - go test -race {{.BUILDFLAGS}} -cover -covermode atomic -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  build:
    run: once
    deps: [fmt]
    sources:
      - '**/*.go'
      - exclude: '**/*_test.go'
    generates:
      - bin/{{.BINNAME}}
    env:
      CGO_ENABLED: 0
    cmds:
      - go build {{.BUILDFLAGS}} -o bin/{{.BINNAME}}

  describe:
    run: once
    deps: [build]
    cmds:
      - bin/{{.BINNAME}} describe | jq

  check:
    run: once
    deps: [build]
    sources:
      - bin/{{.BINNAME}}
    generates:
      - .task/.done_check
    cmds:
      - cd bin && packer-sdc plugin-check {{.BINNAME}}
      - cmd: touch .task/.done_check
        silent: true

  install:
    run: once
    deps: [check]
    vars:
      API_VERSION:
        sh: bin/{{.BINNAME}} describe | jq -r '.api_version'
      PLUGIN_REPO:
        sh: echo '{{.PKGNAME}}' | sed -E 's/packer-plugin-//'
      PLUGIN_BINNAME: '{{.APPNAME}}_v{{.FULLVERSION}}_{{.API_VERSION}}_{{OS}}_{{ARCH}}{{exeExt}}'
    sources:
      - bin/{{.BINNAME}}
    generates:
      - '{{.HOME}}/.packer.d/plugins/{{.PLUGIN_REPO}}/{{.PLUGIN_BINNAME}}'
    cmds:
      - packer plugins install --path bin/{{.BINNAME}} {{.PLUGIN_REPO}}

  run:
    run: once
    deps: [install]
    cmds:
      - packer build example
